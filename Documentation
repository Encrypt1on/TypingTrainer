Документация класса TypingTrainer
=================================

**Описание:**
Класс ``TypingTrainer`` реализует тренажер для слепой печати с использованием библиотеки ``tkinter``. Предоставляет функциональность для генерации тестов, отслеживания статистики и управления уровнями.

---

Методы класса
=============

**__init__(self, root)**
Инициализация экземпляра класса TypingTrainer. Настройка графического интерфейса, переменных и загрузка сохраненного прогресса.

**Аргументы:**
- ``root`` (*tk.Tk*): Главное окно приложения tkinter.

---

**render_keyboard(self)**
Создает и отображает виртуальную клавиатуру на экране.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**resize_keyboard(self, event)**
Изменяет размер клавиатуры в зависимости от размера окна.

**Аргументы:**
- ``event`` (*tkinter.Event*): Событие изменения размера окна.

**Возвращает:**
- None.

---

**highlight_key(self, char)**
Подсвечивает клавишу на виртуальной клавиатуре.

**Аргументы:**
- ``char`` (*str*): Символ для подсветки.

**Возвращает:**
- None.

---

**play_key_sound(self)**
Воспроизводит звуковой сигнал при нажатии клавиши.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**generate_tests_for_level(self, level_text)**
Генерирует случайные строки для текущего уровня на основе заданных символов.

**Аргументы:**
- ``level_text`` (*str*): Символы текущего уровня.

**Возвращает:**
- ``tests`` (*list[str]*): Список сгенерированных тестовых строк.

---

**show_level_image(self)**
Отображает изображение уровня или текст-заполнитель, если изображение отсутствует.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**time_up(self)**
Вызывается при истечении времени для выполнения теста. Перезапускает уровень.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**display_level_statistics(self)**
Вычисляет и отображает статистику текущего уровня.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**check_input(self, event)**
Проверяет введенный пользователем текст при нажатии клавиши ``Return``. Обновляет статистику и переходит к следующему тесту.

**Аргументы:**
- ``event`` (*tkinter.Event*): Событие нажатия клавиши Return.

**Возвращает:**
- None.

---

**start_level(self)**
Инициализирует или перезапускает текущий уровень, подготавливает тесты и интерфейс.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**track_char(self, event)**
Отслеживает нажатие символов, записывает паузы и подсвечивает клавиши.

**Аргументы:**
- ``event`` (*tkinter.Event*): Событие нажатия клавиши.

**Возвращает:**
- None.

---

**save_progress(self)**
Сохраняет текущий прогресс (уровень и тест) в файл ``progress.json``.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

**load_progress(self)**
Загружает сохраненный прогресс из файла ``progress.json``.

**Аргументы:**
- Отсутствуют.

**Возвращает:**
- None.

---

Атрибуты класса
===============

**levels** (*list[str]*):
Список строк, представляющих символы для каждого уровня.

**generated_tests** (*list[list[str]]*):
Список тестовых строк для каждого уровня.

**cur_lvl** (*int*):
Текущий уровень.

**cur_test** (*int*):
Текущий номер теста в уровне.

**count_lvl** (*int*):
Количество тестов на уровне.

**start_time** (*float*):
Временная метка начала теста.

**char_timings** (*list[tuple]*):
Список пар (символ, пауза), записывающих время между нажатиями клавиш.

**time_limit** (*int*):
Лимит времени (в секундах) на выполнение теста.

**level_stats** (*list[dict]*):
Статистика производительности для текущего уровня.

**total_stats** (*list[dict]*):
Общая статистика производительности по всем уровням.

**correct_chars** (*int*):
Количество правильно введенных символов.

**total_chars** (*int*):
Общее количество символов в тесте.

---

Возвращаемые значения
=====================

- **generate_tests_for_level:** ``list[str]`` - Список случайно сгенерированных строк для тестов.
- **Остальные методы:** Возвращают ``None``, если не указано иное.

---

Зависимости
===========

- **tkinter**: Библиотека для создания графического интерфейса.
- **time**: Используется для измерения времени печати.
- **json**: Хранение прогресса в формате JSON.
- **os**: Проверка существования файлов.
- **random**: Генерация случайных тестов.
- **Levenshtein**: Подсчет расстояния Левенштейна для оценки точности.
- **winsound**: Воспроизведение звуковых сигналов.

---

Пример использования
====================

Для запуска приложения:

.. code-block:: python

    if __name__ == "__main__":
        root = tk.Tk()
        trainer = TypingTrainer(root)
        root.bind("<KeyPress>", trainer.track_char)
        root.mainloop()

---

Примечания
==========

- Прогресс сохраняется в файл ``progress.json`` между сессиями.
- Подсветка клавиш и звуковые сигналы помогают пользователю во время тренировки.
- Если изображение уровня отсутствует, отображается текст-заполнитель.

---

Конец документации.
